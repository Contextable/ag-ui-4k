package com.contextable.agui4k.client

import android.content.Context
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.platform.app.InstrumentationRegistry
import com.contextable.agui4k.client.util.initializeAndroid
import com.contextable.agui4k.client.util.getPlatformSettings
import com.contextable.agui4k.client.util.isAndroidInitialized
import com.contextable.agui4k.client.util.resetAndroidContext
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.Before
import kotlin.test.assertNotNull
import kotlin.test.assertTrue
import kotlin.test.fail

/**
 * Diagnostic test to understand what's happening with Android initialization.
 */
@RunWith(AndroidJUnit4::class)
class DiagnosticAndroidTest {

    @Before
    fun setup() {
        // Reset first
        resetAndroidContext()
    }

    @Test
    fun testStepByStepInitialization() {
        println("=== Starting step-by-step Android initialization test ===")

        // Step 1: Check if we can get instrumentation
        val instrumentation = try {
            InstrumentationRegistry.getInstrumentation()
        } catch (e: Exception) {
            fail("Failed to get instrumentation: ${e.message}")
        }
        assertNotNull(instrumentation)
        println("✓ Got instrumentation")

        // Step 2: Check if we can get target context
        val context: Context = try {
            instrumentation.targetContext
        } catch (e: Exception) {
            fail("Failed to get target context: ${e.message}")
        }
        assertNotNull(context)
        println("✓ Got target context: ${context::class.simpleName}")

        // Step 3: Check initial state
        val initiallyInitialized = isAndroidInitialized()
        println("✓ Initially initialized: $initiallyInitialized")

        // Step 4: Try to initialize
        try {
            initializeAndroid(context)
            println("✓ Called initializeAndroid()")
        } catch (e: Exception) {
            fail("Failed to initialize Android: ${e.message}")
        }

        // Step 5: Check if initialization worked
        val nowInitialized = isAndroidInitialized()
        assertTrue(nowInitialized, "Should be initialized after calling initializeAndroid()")
        println("✓ Now initialized: $nowInitialized")

        // Step 6: Try to get platform settings
        try {
            val settings = getPlatformSettings()
            assertNotNull(settings)
            println("✓ Got platform settings: ${settings::class.simpleName}")
        } catch (e: Exception) {
            fail("Failed to get platform settings: ${e.message}")
        }

        println("=== All steps completed successfully ===")
    }

    @Test
    fun testWithoutGlobalState() {
        println("=== Testing without global state ===")

        val context = InstrumentationRegistry.getInstrumentation().targetContext
        val sharedPrefs = context.getSharedPreferences("test_prefs", Context.MODE_PRIVATE)
        val settings = com.russhwolf.settings.SharedPreferencesSettings(sharedPrefs)

        assertNotNull(settings)

        // Test basic operation
        settings.putString("test", "value")
        val retrieved = settings.getString("test", "default")
        assertEquals("value", retrieved)

        println("✓ Direct settings work fine")
    }

    @Test
    fun testContextInfo() {
        println("=== Testing context information ===")

        val context = InstrumentationRegistry.getInstrumentation().targetContext

        println("Context class: ${context::class.simpleName}")
        println("Context package: ${context.packageName}")
        println("Context application info: ${context.applicationInfo?.className ?: "null"}")

        // Test that we can create SharedPreferences
        val prefs = context.getSharedPreferences("test", Context.MODE_PRIVATE)
        assertNotNull(prefs)
        println("✓ SharedPreferences creation works")

        // Test basic SharedPreferences operations
        val editor = prefs.edit()
        editor.putString("test_key", "test_value")
        val committed = editor.commit()
        assertTrue(committed, "SharedPreferences commit should succeed")

        val retrievedValue = prefs.getString("test_key", null)
        assertEquals("test_value", retrievedValue)
        println("✓ SharedPreferences read/write works")

        // Clean up
        prefs.edit().clear().commit()
    }

    private fun assertEquals(expected: String, actual: String?) {
        kotlin.test.assertEquals(expected, actual)
    }
}